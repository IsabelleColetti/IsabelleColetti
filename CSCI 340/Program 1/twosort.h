#ifndef TWOSORT_H
#define TWOSORT_H

/*
	Isabelle Coletti
	z1900409
	CSCI 340 Section 2
	
	I certify that this is my own work and where appropriate an extension 
	of the starter code provided for the assignment.
*/

#include <vector>

using std::vector;

constexpr int ARRAY_SIZE = 200;
constexpr int TEST_ARRAY_SIZE = 100;
constexpr int SEED1 = 1;
constexpr int SEED2 = 3;
constexpr int LOW = 1;
constexpr int HIGH = 1000;
constexpr int NUM_ITEMS = 16;
constexpr int ITEM_W = 4;

/**
 * Fills v1 and v2 with random numbers.
 *
 * Fills vectors v1 and v2 with random numbers generated by two
 * sets of psuedo-random numbers with the seed values s1 and s2,
 * respectively.
 *
 * @param v1 A vector of integers to be filled with seed s1's random numbers.
 * @param v2 A vector of integers to be filled with seed s2's random numbers.
 * @param s1 An integer containing the seed value for v1.
 * @param s2 An integer containing the seed value for v2.
 *
 * @return Nothing.
 *
 ********************************************************************************/
void generateVectors(vector<int> &v1, vector<int> &v2, int s1, int s2);

/**
 * A linear search algorithm.
 *
 * Linear search algorithm where x is searched for in vector
 * v. Returns true when a match is found. If there is no match,
 * it returns false. Uses STL find().
 *
 * @param v A vector of integers to be searched through.
 * @param x An integer containing the value to be searched for in v.
 *
 * @return True if x is found in v, otherwise false.
 *
 ********************************************************************************/
bool linearSearch(const vector<int> &v, int x);

/**
 * A binary search algorithm.
 *
 * Binary search algorithm where x is searched for in vector
 * v. Returns true if the search is successful, otherwise returns
 * false. Uses STL binary_search().
 *
 * @param v A vector of integers to be searched through.
 * @param x An integer containing the value to be searched for in v.
 *
 * @return True if x is found in v, otherwise false.
 *
 ********************************************************************************/
bool binarySearch(const vector<int> &v, int x);

/**
 * Generic search algorithm.
 *
 * A generic search algorithm that takes a pointer to a search
 * routine p() and calls p() for each element of vector v2 in
 * vector v1. Returns the number of successful searches.
 *
 * @param v1 A vector of integers to be searched.
 * @param v2 A vector of integers whose values will be looked for in v1.
 * @param bool(*p)(const vector<int> &, int) A pointer to a search routine.
 *
 * @return An integer representing the number of successful searches.
 *
 ********************************************************************************/
int searchVector(const vector<int> &v1, const vector<int> &v2, bool(*p)(const vector<int> &, int));

/**
 * A sort algorithm.
 *
 * Sort algorithm that sorts the elements of vector v in
 * ascending order. Uses STL sort().
 *
 * @param v A vector of integers to be sorted.
 *
 * @return Nothing.
 *
 ********************************************************************************/
void sortVector(vector<int> &v);

/**
 * Prints the contents of a vector.
 *
 * Prints the elements of vector v to stdout with up to NUM_ITEMS
 * items on a single line. ITEM_W spaces are allocated for
 * each item to be printed.
 *
 * @param v A vector of integers to be printed.
 *
 * @return Nothing.
 *
 ********************************************************************************/
void printVector(const vector<int > &v);

/**
 * Prints the percent of successful searches.
 *
 * Prints the percent of successful searches as floating-point
 * numbers to stdout.
 *
 * @param totalSucCnt An integer containing the number of successful searches.
 * @param vectorSz An integer containing the size of the test vector.
 *
 * @return Nothing.
 *
 ********************************************************************************/
void printStat(int totalSucCnt, int vectorSz);

#endif
